// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/Timeline/user_id": {
            "get": {
                "description": "Get the timeline for a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "timeline"
                ],
                "summary": "Get Timeline",
                "operationId": "user_id",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/timeline.TimelineUser"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.response"
                        }
                    }
                }
            }
        },
        "/follow": {
            "post": {
                "description": "Create a new follower",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "follower"
                ],
                "summary": "Set a new follower",
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.response"
                        }
                    }
                }
            }
        },
        "/tweet": {
            "post": {
                "description": "Create a new tweet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tweet"
                ],
                "summary": "New Tweet",
                "parameters": [
                    {
                        "description": "New tweet",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.doTweetRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.tweetResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.doTweetRequest": {
            "type": "object",
            "required": [
                "date_time",
                "text",
                "user_id"
            ],
            "properties": {
                "date_time": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2017-07-21T17:32:28Z"
                },
                "text": {
                    "type": "string",
                    "example": "message example"
                },
                "user_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "handlers.response": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "handlers.tweetResponse": {
            "type": "object",
            "properties": {
                "date_time": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "text": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "timeline.TimelineUser": {
            "type": "object",
            "properties": {
                "tweets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/tweet.Tweet"
                    }
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "tweet.Tweet": {
            "type": "object",
            "properties": {
                "date_time": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "text": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/v1/api-twitter",
	Schemes:          []string{},
	Title:            "Little Twitter API",
	Description:      "Little Twitter API",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
